unit contingencia;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, NxColumnClasses, NxColumns,
  NxScrollControl, NxCustomGridControl, NxCustomGrid, NxGrid, AdvGlowButton,
  Vcl.StdCtrls, Vcl.Mask, JvExMask, JvToolEdit, Vcl.ExtCtrls, AdvMetroButton,
  AdvSmoothPanel, AdvSmoothExpanderPanel, Vcl.ComCtrls, PageView, principal,
  Data.DB, MemDS, DBAccess, Uni, sMaskEdit, sCustomComboEdit, sToolEdit,
  Vcl.Grids, Vcl.DBGrids, JvExDBGrids, JvDBGrid;

type
    listaQrPDV: TList<TUniQuery>;
  TForm1 = class(TForm)
    PageView1: TPageView;
    PageSheet1: TPageSheet;
    Panel3: TPanel;
    Label3: TLabel;
    ed_server: TEdit;
    ed_server_database: TEdit;
    barra: TProgressBar;
    PageSheet2: TPageSheet;
    Memo1: TMemo;
    Label2: TLabel;
    Label1: TLabel;
    Label4: TLabel;
    AdvGlowButton1: TAdvGlowButton;
    qrPDV_Contingencia: TUniQuery;
    dataini: TsDateEdit;
    datafim: TsDateEdit;
    grid: TJvDBGrid;
    ds_nfce: TDataSource;
    qrTemp: TUniQuery;
    procedure FormCreate(Sender: TObject);
    procedure AdvGlowButton1Click(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Form1: TForm1;

implementation

{$R *.dfm}

procedure TForm1.AdvGlowButton1Click(Sender: TObject);
var
I: Integer;
begin
 if frmPrincipal.conexao_servidor.Connected then begin
      try

        Screen.Cursor := crAppStart;


        for I := 0 to frmPrincipal.grid.RowCount - 1 do begin
          if frmPrincipal.grid.Cell[4, I].AsBoolean then begin
            if frmPrincipal.verifica_conexao('PDV', frmPrincipal.grid.CELL[1, I].ASSTRING, frmPrincipal.GRID.CELL[2, I].ASSTRING) then begin
              frmPrincipal.grid.CELL[3, I].AsInteger := 0;
               // E S T A C A O   PARA   S E R V I D O R

              qrPDV_Contingencia.Close;
              qrPDV_Contingencia.SQL.Clear;
              qrPDV_Contingencia.SQL.Add('select nf.*,' + frmPrincipal.grid.CELL[0, I].ASSTRING + ' as PDV, case when situacao = 0 then ' + QuotedStr('Emitido') + ' else ' + QuotedStr('Cancelado') + ' end des_sit ');
              qrPDV_Contingencia.SQL.Add('from NFCE nf where 1=1 ');

              if dataini.Date > 0 then begin
                qrPDV_Contingencia.SQL.Add('and data >= :pdataini ');
                qrPDV_Contingencia.ParamByName('pdataini').AsDateTime := dataini.Date;
              end;

              if datafim.Date > 0 then begin
                qrPDV_Contingencia.SQL.Add('and data <= :pdatafin ');
                qrPDV_Contingencia.ParamByName('pdatafin').AsDateTime := datafim.Date;
               end;
              qrPDV_Contingencia.SQL.Add('order by numero');
              qrPDV_Contingencia.Open;
              qrPDV_Contingencia.First;


              grid.DataSource := ds_nfce;

              grid.Refresh;



               end;
          end;
        end;
      finally

      end;
 end;




end;

procedure TForm1.FormCreate(Sender: TObject);
begin
    ed_server.Text := principal.frmPrincipal.ed_server.Text;
    ed_server_database.text := principal.frmPrincipal.ed_server_database.Text;
    qrPDV_Contingencia.Connection := principal.frmPrincipal.conexao_pdv;
end;


end.
