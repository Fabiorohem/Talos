unit contingencia;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, NxColumnClasses, NxColumns,
  NxScrollControl, NxCustomGridControl, NxCustomGrid, NxGrid, AdvGlowButton,
  Vcl.StdCtrls, Vcl.Mask, JvExMask, JvToolEdit, Vcl.ExtCtrls, AdvMetroButton,
  AdvSmoothPanel, AdvSmoothExpanderPanel, Vcl.ComCtrls, PageView, principal,
  Data.DB, MemDS, DBAccess, Uni, sMaskEdit, sCustomComboEdit, sToolEdit,
  Vcl.Grids, Vcl.DBGrids, JvExDBGrids, JvDBGrid, System.Generics.Collections,
  NxDBColumns, NxDBGrid, ACBrBase, ACBrDFe, ACBrNFe, System.IniFiles;

type

  TForm1 = class(TForm)
    PageView1: TPageView;
    PageSheet1: TPageSheet;
    Panel3: TPanel;
    Label3: TLabel;
    ed_server: TEdit;
    ed_server_database: TEdit;
    PageSheet2: TPageSheet;
    Memo1: TMemo;
    Label2: TLabel;
    Label1: TLabel;
    Label4: TLabel;
    AdvGlowButton1: TAdvGlowButton;
    qrPDV_Contingencia: TUniQuery;
    dataini: TsDateEdit;
    datafim: TsDateEdit;
    grid: TJvDBGrid;
    ds_nfce: TDataSource;
    qrTemp: TUniQuery;
    Label5: TLabel;
    cbResolvido: TComboBox;
    btnEnviar: TAdvGlowButton;
    NextDBGrid1: TNextDBGrid;
    NxDBTextColumn1: TNxDBTextColumn;
    NxDBTextColumn2: TNxDBTextColumn;
    NxDBTextColumn3: TNxDBTextColumn;
    NxDBTextColumn4: TNxDBTextColumn;
    NxDBTextColumn5: TNxDBTextColumn;
    NxDBTextColumn6: TNxDBTextColumn;
    NxDBTextColumn7: TNxDBTextColumn;
    NxDBTextColumn8: TNxDBTextColumn;
    NxDBCheckBoxColumn1: TNxDBCheckBoxColumn;
    ACBRNFCe: TACBrNFe;

    procedure FormCreate(Sender: TObject);
    procedure AdvGlowButton1Click(Sender: TObject);
    procedure btnEnviarClick(Sender: TObject);
  private
    { Private declarations }
  public

  end;

var
  Form1: TForm1;

implementation

{$R *.dfm}

procedure TForm1.AdvGlowButton1Click(Sender: TObject);
var
I,J: Integer;
begin
 if frmPrincipal.conexao_servidor.Connected then begin
      try




        for I := 0 to frmPrincipal.grid.RowCount - 1 do begin
          if frmPrincipal.grid.Cell[4, I].AsBoolean then begin
            if frmPrincipal.verifica_conexao('PDV', frmPrincipal.grid.CELL[1, I].ASSTRING, frmPrincipal.GRID.CELL[2, I].ASSTRING) then begin
              frmPrincipal.grid.CELL[3, I].AsInteger := 0;
               // E S T A C A O   PARA   S E R V I D O R

                ds_nfce.Enabled := true;
                qrPDV_Contingencia.SQL.Clear;
                qrPDV_Contingencia.SQL.Add('select nf.*,' + frmPrincipal.grid.CELL[0, I].ASSTRING + ' as PDV, case when situacao = 0 then ' + QuotedStr('Emitido') + ' else ' + QuotedStr('Cancelado') + ' end des_sit, case when enviadocontingencia=' + QuotedStr('N') + ' then ' + QuotedStr('True') + ' else ' + QuotedStr('False') + 'end enviar');
                qrPDV_Contingencia.SQL.Add('from NFCE nf where contingencia =' + QuotedStr('S'));

                if dataini.Date > 0 then begin
                  qrPDV_Contingencia.SQL.Add('and data >= :pdataini ');
                  qrPDV_Contingencia.ParamByName('pdataini').AsDateTime := dataini.Date;
                end;

                if datafim.Date > 0 then begin
                  qrPDV_Contingencia.SQL.Add('and data <= :pdatafin ');
                  qrPDV_Contingencia.ParamByName('pdatafin').AsDateTime := datafim.Date;
                 end;

                if cbResolvido.Text = 'Sim' then
                qrPDV_Contingencia.SQL.Add('and ENVIADOCONTINGENCIA ='  + QuotedStr('S'))
                else if cbResolvido.Text = 'Não' then
                qrPDV_Contingencia.SQL.Add('and ENVIADOCONTINGENCIA ='  + QuotedStr('N'));



                qrPDV_Contingencia.SQL.Add('order by numero');
                qrPDV_Contingencia.Open;
                qrPDV_Contingencia.First;

                grid.Refresh;




               end else begin
                frmPrincipal.verifica_conexao('PDV', frmPrincipal.grid.CELL[1, I-1].ASSTRING, frmPrincipal.GRID.CELL[2, I-1].ASSTRING);

                ds_nfce.Enabled := true;
                qrPDV_Contingencia.SQL.Clear;
                qrPDV_Contingencia.SQL.Add('select nf.*,' + frmPrincipal.grid.CELL[0, I].ASSTRING + ' as PDV, case when situacao = 0 then ' + QuotedStr('Emitido') + ' else ' + QuotedStr('Cancelado') + ' end des_sit, case when enviadocontingencia=' + QuotedStr('N') + ' then ' + QuotedStr('True') + ' else ' + QuotedStr('False') + 'end enviar');
                qrPDV_Contingencia.SQL.Add('from NFCE nf where contingencia =' + QuotedStr('S'));

                if dataini.Date > 0 then begin
                  qrPDV_Contingencia.SQL.Add('and data >= :pdataini ');
                  qrPDV_Contingencia.ParamByName('pdataini').AsDateTime := dataini.Date;
                end;

                if datafim.Date > 0 then begin
                  qrPDV_Contingencia.SQL.Add('and data <= :pdatafin ');
                  qrPDV_Contingencia.ParamByName('pdatafin').AsDateTime := datafim.Date;
                 end;

                if cbResolvido.Text = 'Sim' then
                qrPDV_Contingencia.SQL.Add('and ENVIADOCONTINGENCIA ='  + QuotedStr('S'))
                else if cbResolvido.Text = 'Não' then
                qrPDV_Contingencia.SQL.Add('and ENVIADOCONTINGENCIA ='  + QuotedStr('N'));



                qrPDV_Contingencia.SQL.Add('order by numero');
                qrPDV_Contingencia.Open;
                qrPDV_Contingencia.First;


               end;
          end;
        end;
      finally

      end;
 end;


end;

procedure TForm1.btnEnviarClick(Sender: TObject);
var
I: Integer;
teste: TStringStream;
begin


  qrTemp := qrPDV_Contingencia;
  qrTemp.First;



  while not qrTemp.Eof do begin

            if qrTemp.FieldByName('enviar').Value = True then begin



            teste := TStringStream.Create;
            ACBRNFCe.NotasFiscais.Clear;
            TBlobField(qrTemp.FieldByName('XMLENVIO')).SaveToStream(teste);
            ACBRNFCe.NotasFiscais.LoadFromStream(teste);
            ACBRNFCe.Enviar(ACBRNFCe.NotasFiscais.Items[0].NFe.Ide.nNF, False, True);
            if ACBRNFCe.NotasFiscais.Items[0].Confirmada then begin
              if ACBRNFCe.WebServices.Enviar.cStat = 100 then begin
                qrTemp.Edit;
                qrTemp.FieldByName('ENVIADOCONTINGENCIA').AsString := 'S';
                qrTemp.FieldByName('EX').AsInteger := 0;
                qrTemp.FieldByName('ALTERADO').AsString := 'S';
                qrTemp.Post;
                qrTemp.ApplyUpdates;
              end;
            end
            else begin

            end;
          end;
          qrTemp.Next;
end;
end;

procedure TForm1.FormCreate(Sender: TObject);
begin
    ed_server.Text := principal.frmPrincipal.ed_server.Text;
    ed_server_database.text := principal.frmPrincipal.ed_server_database.Text;
    qrPDV_Contingencia.Connection := principal.frmPrincipal.conexao_pdv;
    NextDBGrid1.DataSource := ds_nfce;
end;

procedure LerConfiguracao;
var
  arquivo_ini: TIniFile;
begin

    arquivo_ini := TIniFile.Create(sDir_Sistema + '\cfg\cfg.ini');

    ACBRNFCe.Configuracoes.Certificados.ArquivoPFX := Ini.ReadString('Certificado', 'Caminho', '');
    ACBRNFCe.Configuracoes.Certificados.Senha := Ini.ReadString('Certificado', 'Senha', '');

    ACBRNFCe.Configuracoes.Certificados.NumeroSerie := Ini.ReadString('Certificado', 'NumSerie', '');

    ACBRNFCe.SSL.DescarregarCertificado;

    with ACBRNFCe.Configuracoes.Geral do begin
      SSLLib := TSSLLib(Ini.ReadInteger('Certificado', 'SSLLib', 0));
      SSLCryptLib := TSSLCryptLib(Ini.ReadInteger('Certificado', 'CryptLib', 0));
      SSLHttpLib := TSSLHttpLib(Ini.ReadInteger('Certificado', 'HttpLib', 0));
      SSLXmlSignLib := TSSLXmlSignLib(Ini.ReadInteger('Certificado', 'XmlSignLib', 0));
      AtualizarXMLCancelado := Ini.ReadBool('Geral', 'AtualizarXML', True);
      ExibirErroSchema := Ini.ReadBool('Geral', 'ExibirErroSchema', True);
      RetirarAcentos := Ini.ReadBool('Geral', 'RetirarAcentos', True);
      FormatoAlerta := Ini.ReadString('Geral', 'FormatoAlerta', 'TAG:%TAGNIVEL% ID:%ID%/%TAG%(%DESCRICAO%) - %MSG%.');
      ModeloDF := TpcnModeloDF(moNFCe);
      VersaoDF := TpcnVersaoDF(Ini.ReadInteger('Geral', 'VersaoDF', 0));
      IdCSC := Ini.ReadString('Geral', 'IdToken', '');
      CSC := Ini.ReadString('Geral', 'Token', '');
      Salvar := Ini.ReadBool('Geral', 'Salvar', True);
      VersaoQRCode := TpcnVersaoQrCode(Ini.ReadInteger('WebService', 'VersaoQRCode', 0));
    end;
    if ACBRNFCe.Configuracoes.Geral.VersaoDF = ve400 then
      VersaoNFE := v400
    else
      VersaoNFE := v310;

    with ACBRNFCe.Configuracoes.WebServices do begin
      UF := Ini.ReadString('WebService', 'UF', 'SP');
      Ambiente := StrToTpAmb(Ok, IntToStr(Ini.ReadInteger('WebService', 'Ambiente', 0) + 1));
      Visualizar := Ini.ReadBool('WebService', 'Visualizar', False);
      Salvar := Ini.ReadBool('WebService', 'SalvarSOAP', False);
      AjustaAguardaConsultaRet := Ini.ReadBool('WebService', 'AjustarAut', False);
      if NaoEstaVazio(Ini.ReadString('WebService', 'Aguardar', '0')) then
        AguardarConsultaRet := ifThen(StrToInt(Ini.ReadString('WebService', 'Aguardar', '0')) < 1000, StrToInt(Ini.ReadString('WebService', 'Aguardar', '0')) * 1000, StrToInt(Ini.ReadString('WebService', 'Aguardar', '0')));

      if NaoEstaVazio(Ini.ReadString('WebService', 'Tentativas', '5')) then
        Tentativas := StrToInt(Ini.ReadString('WebService', 'Tentativas', '5'));

      if NaoEstaVazio(Ini.ReadString('WebService', 'Intervalo', '0')) then
        IntervaloTentativas := ifThen(StrToInt(Ini.ReadString('WebService', 'Intervalo', '0')) < 1000, StrToInt(Ini.ReadString('WebService', 'Intervalo', '0')) * 1000, StrToInt(Ini.ReadString('WebService', 'Intervalo', '0')));

      TimeOut := Ini.ReadInteger('WebService', 'TimeOut', 5000);
      ProxyHost := Ini.ReadString('Proxy', 'Host', '');
      ProxyPort := Ini.ReadString('Proxy', 'Porta', '');
      ProxyUser := Ini.ReadString('Proxy', 'User', '');
      ProxyPass := Ini.ReadString('Proxy', 'Pass', '');
    end;
    MotivoContigencia := Ini.ReadString('WebService','MotivoContingencia','Sem conexão com a Internet.');
    ACBRNFCe.SSL.SSLType := TSSLType(Ini.ReadInteger('WebService', 'SSLType', 0));

    with ACBRNFCe.Configuracoes.Arquivos do begin
      Salvar := Ini.ReadBool('Arquivos', 'Salvar', false);
      SepararPorMes := Ini.ReadBool('Arquivos', 'PastaMensal', false);
      AdicionarLiteral := Ini.ReadBool('Arquivos', 'AddLiteral', false);
      EmissaoPathNFe := Ini.ReadBool('Arquivos', 'EmissaoPathNFe', false);
      SalvarEvento := Ini.ReadBool('Arquivos', 'SalvarPathEvento', false);
      SepararPorCNPJ := Ini.ReadBool('Arquivos', 'SepararPorCNPJ', false);
      SepararPorModelo := Ini.ReadBool('Arquivos', 'SepararPorModelo', false);
      PathSalvar := Ini.ReadString('Geral', 'PathSalvar', PathWithDelim(ExtractFilePath(Application.ExeName)) + 'Logs');
      PathSchemas := Ini.ReadString('Geral', 'PathSchemas', '');
      PathNFe := Ini.ReadString('Arquivos', 'PathNFe', '');
      PathInu := Ini.ReadString('Arquivos', 'PathInu', '');
      PathEvento := Ini.ReadString('Arquivos', 'PathEvento', '');
    end;

//    EditLogoMarca := Ini.ReadString('PDV', 'CAMINHO_LOGO', '');
//    if ACBRNFCe.DANFE <> nil then
//      ACBRNFCe.DANFE.TipoDANFE := tiNFCe;
//    if (EditLogoMarca <> '') and (FileExists(EditLogoMarca)) then
//      ACBRNFCe.DANFE.Logo := EditLogoMarca;
//    ACBRDANFENFCe.FastFile := 'C:\TALOS\pdv\Schemas\DANFeNFCe.fr3';
//
//    edtcfop := Ini.ReadString('Geral', 'CFOP_PADRAO', '5101');
//
//    EdFormatoOff := Ini.ReadInteger('WebService', 'FormatoOFF', 0);
//    ContigenciaPermanente := Ini.ReadBool('WebService', 'ContingenciaPermanente', false);
//    edtEmitCNPJ := Ini.ReadString('Emitente', 'CNPJ', '');
//    edtEmitIE := Ini.ReadString('Emitente', 'IE', '');
//    edtEmitIM := Ini.ReadString('Emitente', 'IM', '');
//    edtEmitRazao := Ini.ReadString('Emitente', 'RazaoSocial', '');
//    edtEmitFantasia := Ini.ReadString('Emitente', 'Fantasia', '');
//    edtEmitFone := Ini.ReadString('Emitente', 'Fone', '');
//    edtEmitCEP := Ini.ReadString('Emitente', 'CEP', '');
//    edtEmitLogradouro := Ini.ReadString('Emitente', 'Logradouro', '');
//    edtEmitNumero := Ini.ReadString('Emitente', 'Numero', '');
//    edtEmitComp := Ini.ReadString('Emitente', 'Complemento', '');
//    edtEmitBairro := Ini.ReadString('Emitente', 'Bairro', '');
//    edtEmitCodCidade := Ini.ReadString('Emitente', 'CodCidade', '');
//    edtEmitCidade := Ini.ReadString('Emitente', 'Cidade', '');
//    edtEmitUF := Ini.ReadString('Emitente', 'UF', '');
//    edtSerie := Ini.ReadString('Emitente', 'Serie', '');
//
//    edDescEsta := Ini.ReadString('Impressao', 'Descricao via estabelecimento', 'Via do Consumidor');
//    edMargem := Ini.ReadInteger('Impressao', 'Espessura Margem', 1);
//    edMargEsq := Ini.ReadFloat('Impressao', 'Margem Esquerda', 0.6);
//    edMargDir := Ini.ReadFloat('Impressao', 'Margem Direita', 0.51);
//    edMargSup := Ini.ReadFloat('Impressao', 'Margem Superior', 0.8);
//    edMarginf := Ini.ReadFloat('Impressao', 'Margem Inferior', 0.8);

   finally
    Ini.Free;
  end;
end;


end.
